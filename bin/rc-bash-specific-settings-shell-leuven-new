#!/usr/bin/env bash

# Last modified: <20250506.1310>

# Set the maximum directory stack size to 10.
DIRSTACKSIZE=10
export DIRSTACKSIZE

# Custom cd function that maintains a directory stack with unique entries.
cd() {
    # Attempt to change directory using built-in cd.
    if builtin cd "$@" 2> /dev/null; then
        # Normalize the current directory path for comparison.
        local current_dir
        current_dir=$(realpath "$PWD" 2> /dev/null || echo "$PWD")

        # Get the current directory stack without the top entry (current dir).
        local stack
        stack=$(dirs -p -l | tail -n +2)

        # Clear the existing stack to rebuild it without duplicates.
        while popd -n > /dev/null 2>&1; do :; done

        # Rebuild the stack, excluding the current directory.
        local temp_stack=()
        while IFS= read -r dir; do
            # Normalize directory path for comparison.
            local normalized_dir
            normalized_dir=$(realpath "$dir" 2> /dev/null || echo "$dir")
            if [[ "$normalized_dir" != "$current_dir" ]]; then
                temp_stack+=("$dir")
            fi
        done <<< "$stack"

        # Push unique directories back to the stack, respecting DIRSTACKSIZE.
        local stack_size=${#temp_stack[@]}
        for ((i=$stack_size-1; i>=0 && stack_size<${DIRSTACKSIZE:-10}-1; i--)); do
            pushd -n "${temp_stack[$i]}" > /dev/null 2>&1
            ((stack_size++))
        done

        # Add the current directory to the stack.
        pushd -n "$PWD" > /dev/null 2>&1

        # Provide feedback (show stack excluding the current directory at index 0).
        dirs -v | tail -n +2 | head -n 9 | sed 's/^ //'
    else
        printf >&2 "cd: Failed to change directory to: %s\n" "$*"
        return 2
    fi
}

# Jump to a directory by visible stack index (as shown in 'dirs -v').
jumpd() {
    local index="$1"

    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
        printf >&2 "jumpd: Index must be a non-negative number\n"
        return 2
    fi

    local line
    line=$(dirs -v | awk -v idx="$index" '$1 == idx { $1=""; sub(/^ +/, ""); print }')

    if [ -z "$line" ]; then
        printf >&2 "jumpd: Invalid index: %s\n" "$index"
        return 2
    fi

    # Expand ~ using realpath.
    local target_dir
    target_dir=$(eval echo "$line")

    if builtin cd "$target_dir" 2> /dev/null; then
        # Successfully changed directory, do nothing.
        :
    else
        printf >&2 "jumpd: Failed to cd to: %s\n" "$target_dir"
        return 2
    fi
}

# Define cd aliases for switching to specific stack entries.
cd1() { jumpd 1; }  # Move to the most recent directory.
cd2() { jumpd 2; }  # Move to the second most recent directory.
cd3() { jumpd 3; }
cd4() { jumpd 4; }
cd5() { jumpd 5; }
cd6() { jumpd 6; }
cd7() { jumpd 7; }
cd8() { jumpd 8; }
cd9() { jumpd 9; }

# M-S-l: Send the string 'ls' followed by a newline.
bind '"\eL": "ls\n"'

# C-M-u: Move to parent directory.
bind '"\e\C-u": "cd ..\n"'

# M-s: Prepend sudo.
bind '"\es": "\C-asudo \C-e"'

# Function to copy the previous word.
copy-prev-word() {
    local words=($READLINE_LINE)
    local cursor_position=$READLINE_POINT
    local word_index=${#words[@]}

    # Find the word before the cursor
    for ((i=${#words[@]}-1; i>=0; i--)); do
        if ((${#words[i]} + ${#words[i+1]} + 1 < cursor_position)); then
            word_index=$i
            break
        fi
        cursor_position=$((cursor_position - ${#words[i]} - 1))
    done

    # Insert the previous word at the cursor position
    if ((word_index > 0)); then
        READLINE_LINE="${READLINE_LINE:0:READLINE_POINT}${words[word_index-1]}${READLINE_LINE:READLINE_POINT}"
        READLINE_POINT=$((READLINE_POINT + ${#words[word_index-1]}))
    fi
}

# Bind the function to C-x C-d.
bind -x '"\C-x\C-d":copy-prev-word'

# Function to run help on the current command
run-help() {
    # Get the first word of the last command (i.e., the last command in the
    # pipeline or sequence).
    local cmd=$(printf "%s" "$READLINE_LINE" | awk -F'\\||;' '{print $NF}' | awk '{print $1}')

    # Check if there's a command to process.
    if [[ -n "$cmd" ]]; then
        # Show the man page for the command (if it exists).
        man "$cmd" 2> /dev/null || {
            # If no man page, use the `whatis` command for a brief description.
            whatis "$cmd" || printf "No help available for '%s'.\n" "$cmd"
        }
    else
        printf "No command to show help for.\n"
        return 1
    fi
}

# Bind the function run-help to M-h.
bind -x '"\eh": run-help'

# Customize PS1 prompt.

# Define a custom function to display the exit code in red if it's non-zero.
show_exit_code() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        printf "\033[01;31m%s\033[00m\n" "$exit_code"
    else
        printf "%s" ""
    fi
}

# Set the PROMPT_COMMAND to call the custom function.
PROMPT_COMMAND='show_exit_code'



PS1='\n\
\[\e]0;\u@\h: \w\a\]\
${debian_chroot:+($debian_chroot)}\
\[\033[01;32m\]\u@\h\[\033[00m\]\
\[\033[01;30m\]:\[\033[00m\]\
\[\033[01;34m\]\w\[\033[00m\] \
\[\033[01;33m\]($(git branch 2> /dev/null | grep '^*' | colrm 1 2))\
\[\033[0m\]\n\$ '

PS1='\n\
\[\e]0;\u@\h: \w\a\]\
${debian_chroot:+($debian_chroot)}\
\[\033[01;32m\]\u@\h\[\033[00m\]\
\[\033[01;30m\]:\[\033[00m\]\
\[\033[01;34m\]\w\[\033[00m\]\
\[\033[01;33m\]$(__git_ps1)\
\[\033[0m\]\n\
\[\033[1m\]\$ \[\033[0m\]'

__git_ps1() {
    local git_info
    git_info="$(git rev-parse --is-inside-work-tree 2> /dev/null)"

    if [[ -z "$git_info" ]]; then
        return $?
    fi

    local branch
    if branch="$(git symbolic-ref --short -q HEAD 2> /dev/null)"; then
        : # We are on a branch, nothing to do here.
    else
        branch="$(git rev-parse --short HEAD 2> /dev/null)"
    fi

    local dirty=""                      # should be in red
    local staged=""                     # should be in magenta
    local stash=""                      # should be in blue
    local untracked=""                  # should be in green
    local outgoing=""                   # should be in yellow
    local incoming=""                   # should be in cyan

    if [[ -n "$(git diff --no-ext-diff --quiet || echo '*')" ]]; then
        dirty=" *dirty"
    fi

    if [[ -n "$(git diff --no-ext-diff --cached --quiet || echo '+')" ]]; then
        staged=" +staged"
    fi

    if git rev-parse --verify --quiet refs/stash > /dev/null; then
        stash=" \$stash"
    fi

    if git ls-files --others --exclude-standard --error-unmatch -- ':/*' > /dev/null 2>&1; then
        untracked=" ?untracked"
    fi

    local count_outgoing=0
    local count_incoming=0
    local upstream_branch

    if upstream_branch="$(git rev-parse --abbrev-ref @{u} 2> /dev/null)"; then
        count_outgoing=$(git rev-list --count --left-right @{u}...HEAD 2> /dev/null | awk '{print $2}')
        count_incoming=$(git rev-list --count --left-right @{u}...HEAD 2> /dev/null | awk '{print $1}')
    fi

    if (( count_outgoing > 0 )); then
        outgoing=" ↑$count_outgoing"
    fi

    if (( count_incoming > 0 )); then
        incoming=" ↓$count_incoming"
    fi

    local status_info="$dirty$staged$stash$untracked$outgoing$incoming"

    branch="${branch##refs/heads/}"
    printf -- " (%s)" "$branch$(tput setaf 6)${status_info:+$status_info}$(tput setaf 3)"
}

# XXX Make use of color_prompt variable?

# Check if history search bindings are already set.
if ! bind -q history-search-backward > /dev/null 2>&1; then
    # If not set, configure Up and Down arrow keys for history search.
    bind '"\e[A": history-search-backward'  # Up arrow: Search backward in command history.
    bind '"\e[B": history-search-forward'   # Down arrow: Search forward in command history.
fi

# Enable case-insensitive directory completion.
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

# Set a common history file.
HISTFILE=$HOME/.bash_history

# Set the number of history entries to save to the (on-disk history)
# file.
export HISTFILESIZE=20000

# Append to the history file instead of overwriting it.
shopt -s histappend

# Add history management to the existing PROMPT_COMMAND: after each
# command, append to the history file and reload it.
if [ -n "$PROMPT_COMMAND" ]; then
    PROMPT_COMMAND="$PROMPT_COMMAND; history -a; history -n"
else
    PROMPT_COMMAND="history -a; history -n"
fi
