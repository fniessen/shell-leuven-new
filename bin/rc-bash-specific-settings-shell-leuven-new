#!/usr/bin/env bash

# Last modified: <20250704.1118>

# Set the maximum directory stack size to 10.
DIRSTACKSIZE=10
export DIRSTACKSIZE

# Check if realpath is available; if not, warn about potential issues.
if ! command -v realpath > /dev/null 2>&1; then
    printf >&2 "Warning: 'realpath' not found. Directory stack normalization may not work correctly.\n"
fi

# Custom cd function that maintains a directory stack with unique entries.
cd() {
    # Attempt to change directory using built-in cd.
    if builtin cd "$@" 2> /dev/null; then
        # Normalize the current directory path for comparison.
        local current_dir
        current_dir=$(realpath "$PWD" 2> /dev/null || echo "$PWD")

        # Get the current directory stack without the top entry (current dir).
        local stack
        stack=$(dirs -p -l | tail -n +2)

        # Clear the existing stack to rebuild it without duplicates.
        while popd -n > /dev/null 2>&1; do :; done

        # Rebuild the stack, excluding the current directory.
        local temp_stack=()
        while IFS= read -r dir; do
            # Normalize directory path for comparison.
            local normalized_dir
            normalized_dir=$(realpath "$dir" 2> /dev/null || echo "$dir")
            if [[ "$normalized_dir" != "$current_dir" ]]; then
                temp_stack+=("$dir")
            fi
        done <<< "$stack"

        # Push unique directories back to the stack, respecting DIRSTACKSIZE.
        local stack_size=${#temp_stack[@]}
        for ((i=$stack_size-1; i>=0 && stack_size<${DIRSTACKSIZE:-10}-1; i--)); do
            pushd -n "${temp_stack[$i]}" > /dev/null 2>&1
            ((stack_size++))
        done

        # Add the current directory to the stack.
        pushd -n "$PWD" > /dev/null 2>&1

        # Provide feedback (show stack excluding the current directory at index 0).
        dirs -v | tail -n +2 | head -n 9 | sed 's/^ //'
    else
        printf >&2 "cd: Failed to change directory to: %s\n" "$*"
        return 2
    fi
}

# Jump to a directory by visible stack index (as shown in 'dirs -v').
jumpd() {
    local index="$1"

    if ! [[ "$index" =~ ^[0-9]+$ ]]; then
        printf >&2 "jumpd: Index must be a non-negative number\n"
        return 2
    fi

    local line
    line=$(dirs -v | awk -v idx="$index" '$1 == idx { $1=""; sub(/^ +/, ""); print }')

    if [ -z "$line" ]; then
        printf >&2 "jumpd: Invalid index: %s\n" "$index"
        return 2
    fi

    # Expand ~ using realpath.
    local target_dir
    target_dir=$(eval echo "$line")

    if builtin cd "$target_dir" 2> /dev/null; then
        # Successfully changed directory, do nothing.
        :
    else
        printf >&2 "jumpd: Failed to cd to: %s\n" "$target_dir"
        return 2
    fi
}

# Define cdN() functions for switching to specific stack entries using jumpd.
for i in {1..9}; do
  eval "cd$i() { jumpd $i; }"
done
# 'cd1' moves to the most recent directory.
# 'cd2' moves to the second most recent directory.
# etc.

# M-S-l: Send the string 'ls' followed by a newline.
bind '"\eL": "ls\n"'

# C-M-u: Move to parent directory.
bind '"\e\C-u": "cd ..\n"'

# M-s: Prepend sudo.
bind '"\es": "\C-asudo \C-e"'

# Function to copy the previous word.
copy-prev-word() {
    local words=($READLINE_LINE)
    local cursor_position=$READLINE_POINT
    local word_index=${#words[@]}

    # Find the word before the cursor
    for ((i=${#words[@]}-1; i>=0; i--)); do
        if ((${#words[i]} + ${#words[i+1]} + 1 < cursor_position)); then
            word_index=$i
            break
        fi
        cursor_position=$((cursor_position - ${#words[i]} - 1))
    done

    # Insert the previous word at the cursor position
    if ((word_index > 0)); then
        READLINE_LINE="${READLINE_LINE:0:READLINE_POINT}${words[word_index-1]}${READLINE_LINE:READLINE_POINT}"
        READLINE_POINT=$((READLINE_POINT + ${#words[word_index-1]}))
    fi
}

# Bind the function to C-x C-d.
bind -x '"\C-x\C-d":copy-prev-word'

# Function to run help on the current command
run-help() {
    # Get the first word of the last command (i.e., the last command in the
    # pipeline or sequence).
    local cmd=$(printf "%s" "$READLINE_LINE" | awk -F'\\||;' '{print $NF}' | awk '{print $1}')

    # Check if there's a command to process.
    if [[ -n "$cmd" ]]; then
        # Show the man page for the command (if it exists).
        man "$cmd" 2> /dev/null || {
            # If no man page, use the `whatis` command for a brief description.
            whatis "$cmd" || printf "No help available for '%s'.\n" "$cmd"
        }
    else
        printf "No command to show help for.\n"
        return 1
    fi
}

# Bind the function run-help to M-h.
bind -x '"\eh": run-help'

# Customize PS1 prompt.

# Define a custom function to display the exit code in red if it's non-zero.
show_exit_code() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        printf "\033[01;31m%s\033[00m\n" "$exit_code"
    else
        printf "%s" ""
    fi
}

# Set the PROMPT_COMMAND to call the custom function.
PROMPT_COMMAND='show_exit_code'



# ───────────────────────────────────────────────────────────────
# Powerline-style Git-enhanced Bash prompt
# ───────────────────────────────────────────────────────────────

# Check if 'git' command is available.
if ! command -v git > /dev/null 2>&1; then
    printf >&2 "ERROR: 'git' command not found.\n"
fi

# Custom colors
# GIT_DIRTY_COLOR="\033[0;31m"           # Red (attention needed).
GIT_DIRTY_COLOR="\033[1;37;41m"
GIT_STAGED_COLOR="\033[0;32m"          # Green (good to go / ready).
GIT_STASH_COLOR="\033[0;36m"           # Cyan (info).
GIT_UNTRACKED_COLOR="\033[0;33m"       # Yellow (warning light).
GIT_OUTGOING_COLOR="\033[1;35m"        # Purple for contrast.
GIT_INCOMING_COLOR="\033[0;36m"        # Cyan (info).
# GIT_BRANCH_COLOR="\033[0;35m"          # Magenta.
GIT_BRANCH_COLOR="\033[37;45m"
GIT_RESET_COLOR="\033[0m"              # Reset to default color.

__git_ps1() {
    git rev-parse --is-inside-work-tree &> /dev/null || return

    local branch
    if branch="$(git symbolic-ref --short -q HEAD 2> /dev/null)"; then
        : # We are on a branch, nothing to do here.
    else
        branch="$(git rev-parse --short HEAD 2> /dev/null)"
    fi

    local dirty=""    # should be in red
    local staged=""   # should be in magenta
    local stash=""    # should be in blue
    local untracked="" # should be in green
    local outgoing="" # should be in yellow
    local incoming="" # should be in cyan

    # Dirty (unstaged).
    if ! git diff --quiet --no-ext-diff; then
        dirty="*"
    fi

    # Staged.
    if ! git diff --cached --quiet; then
        staged="+"
    fi

    # Stash.
    if git rev-parse --verify --quiet refs/stash > /dev/null; then
        stash="\$"
    fi

    # Untracked.
    if git ls-files --others --exclude-standard | grep -q .; then
        untracked="?"
    fi

    # Ahead / Behind.
    if git rev-parse --abbrev-ref @{u} &> /dev/null; then
        local counts
        counts="$(git rev-list --left-right --count HEAD...@{u} 2> /dev/null)"
        local count_outgoing=$(echo "$counts" | awk '{print $2}')
        local count_incoming=$(echo "$counts" | awk '{print $1}')
        (( count_outgoing > 0 )) && outgoing="↑$count_outgoing"
        (( count_incoming > 0 )) && incoming="↓$count_incoming"
    fi

    local status="$dirty$staged$stash$untracked$outgoing$incoming"
    echo "$branch${status:+ $status}"
}

function set_prompt() {
    # Powerline separators.
    local SEPARATOR_RIGHT=""

    # Colors (with proper Bash escapes).
    local RESET="\[\033[0m\]"

    local USER_BG="\[\033[48;5;240m\]"
    local USER_FG="\[\033[38;5;15m\]"

    local DIR_BG="\[\033[48;5;25m\]"
    local DIR_FG="\[\033[38;5;15m\]"

    local GIT_BG="\[\033[48;5;238m\]"
    local GIT_FG="\[\033[38;5;15m\]"

    # Prompt assembly.
    PS1="\n"

    # User@Host.
    PS1+="${USER_BG}${USER_FG}\u@\h ${RESET}${DIR_BG}\[\033[38;5;240m\]${SEPARATOR_RIGHT}${RESET}"

    # Working directory.
    PS1+="${DIR_BG}${DIR_FG} \w ${RESET}"

    # Git status, only if inside repo.
    if git rev-parse --is-inside-work-tree &> /dev/null; then
        PS1+="${GIT_BG}\[\033[38;5;25m\]${SEPARATOR_RIGHT}${RESET}"
        PS1+="${GIT_BG}${GIT_FG} \$(__git_ps1) ${RESET}"
    fi

    # Final line and prompt symbol.
    PS1+="\n\[\033[1m\]\$ \[\033[0m\]"
}

PROMPT_COMMAND='set_prompt'

# XXX Make use of color_prompt variable?

# Check if history search bindings are already set.
if ! bind -q history-search-backward > /dev/null 2>&1; then
    # If not set, configure Up and Down arrow keys for history search.
    bind '"\e[A": history-search-backward'  # Up arrow: Search backward in command history.
    bind '"\e[B": history-search-forward'   # Down arrow: Search forward in command history.
fi

# Enable case-insensitive directory completion.
bind "set completion-ignore-case on"
bind "set show-all-if-ambiguous on"

# Set a common history file.
HISTFILE=$HOME/.bash_history

# Set the number of history entries to save to the (on-disk history) file.
export HISTFILESIZE=20000

# Append to the history file instead of overwriting it.
shopt -s histappend

# Add history management to the existing PROMPT_COMMAND: after each command,
# append to the history file and reload it.
if [ -n "$PROMPT_COMMAND" ]; then
    PROMPT_COMMAND="$PROMPT_COMMAND; history -a; history -n"
else
    PROMPT_COMMAND="history -a; history -n"
fi
